import asyncio
import datetime
import json
import os.path
import time
import sqlite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

import bot
from handlers.users.delete_message import delete_message
from handlers.users.search import search
from handlers.users.show_media import show_media
from handlers.users.show_place import show_place
from keyboards.default import menu
from keyboards.inline.mesto import mesto2, mesto3, hide
from keyboards.inline.quit import exitqr
from loader import dp, bot
from requests.requests_mediagroup import get_info
from state.show_photo import Showphoto, Place, Search
from utils.new_qr import qr_code
from utils.open_exsel import place, search_articul


@dp.message_handler(commands=['start'], state='*')
async def bot_start(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    """
    sticker = open('stikers/AnimatedSticker2.tgs', 'rb')
    await bot.send_sticker(message.chat.id, sticker)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!'
                         '\n–î–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã —Å —Å–∞–π—Ç–∞'
                         '\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80264335.'
                         '\n"ü§ñ –ü–æ–∫–∞–∑–∞—Ç—å Qrcode —è—á–µ–π–∫–∏" - '
                         '\n–î–ª—è –ø–æ–∫–∞–∑–∞ Qrcode —è—á–µ–π–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ. '
                         '\n"üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏" - '
                         '\n–î–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —è—á–µ–π–∫–µ.'
                         '\n"üîç –ü–æ–∏—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ" - '
                         '\n–î–ª—è –ø–æ–∏—Å–∫–∞ —è—á–µ–µ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º.'
                         .format(message.from_user.first_name), reply_markup=menu)
    connect = sqlite3.connect('C:/Users/sklad/base/BD/users.bd')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(id INTEGER, name TEXT, date REAL)""")
    connect.commit()

    people_id = message.chat.id
    cursor.execute('SELECT id FROM login_id WHERE id = {}'.format(people_id))
    data = cursor.fetchone()
    if data is None:
        date = datetime.datetime.now()
        user_id = [message.chat.id, message.from_user.first_name, date]
        cursor.execute('INSERT INTO login_id VALUES(?,?,?);', user_id)
        connect.commit()


@dp.message_handler(commands=['help'], state='*')
async def bot_help(message: types.Message):
    """
    –°–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–∞
    """
    await message.answer('\n–î–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Ü–µ–Ω—ã —Å —Å–∞–π—Ç–∞'
                         '\n–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80264335.'
                         '\n"ü§ñ Qrcode —è—á–µ–π–∫–∏" - '
                         '\n–î–ª—è –ø–æ–∫–∞–∑–∞ Qrcode —è—á–µ–π–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ. '
                         '\n"üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏" - '
                         '\n–î–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —è—á–µ–π–∫–µ.'
                         '\n"üîç –ü–æ–∏—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ" - '
                         '\n–î–ª—è –ø–æ–∏—Å–∫–∞ —è—á–µ–µ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º.'
                         '\n–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ú–∏—Ö–∞–∏–ª—É, –ë–Æ 825(—Å–∫–ª–∞–¥), \n–ø–æ—á—Ç–∞ - muxazila@mail.ru')


@dp.message_handler(commands=['showqr'], state='*')
async def show_qr(message: types.Message, state: FSMContext):
    """
    –¢—Ä–∏–≥–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É showqr –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å –∫–Ω–æ–ø–∫–∏.
    """
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}: {} {} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É /showqr'.format(
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.username
    ))

    await bot.send_message(message.from_user.id, '–î–ª—è –ø–æ–∫–∞–∑–∞ Qrcode –≤–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é,'
                                                 '\n—è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞.'
                                                 '\n–ü—Ä–∏–º–µ—Ä: 721 - —ç—Ç–æ 7 —Ä—è–¥ 2 —Å–µ–∫—Ü–∏—è 1 —è—á–µ–π–∫–∞')
    async with state.proxy() as data:
        data['command'] = message.get_command()
        data['message_id'] = message.message_id

    await Showphoto.show_qr.set()


@dp.message_handler(state=Showphoto.show_qr)
async def showqr(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ qcodes.
    –ï–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.
    –°–∫–∏–¥—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–µ.
    """
    ans = message.text
    if ans.isdigit():
        if len(ans) == 3:
            if 0 < int(ans[1]) < 9 and int(ans[2]) < 5:

                await bot.send_message(message.from_user.id, '{} —Ä—è–¥ {} —Å–µ–∫—Ü–∏—è {} —è—á–µ–π–∫–∞'.
                                       format(ans[0], ans[1], ans[2]))

                data = ('012_825-0{}-0{}-{}'.format(message.text[0], message.text[1], message.text[2]))
                qr_code(message, data)
                qrcod = open('qcodes/{}.jpg'.format(message.text), 'rb')
                await bot.send_photo(message.from_user.id, qrcod)
                logger.info(data)
                await state.reset_state()
                logger.info('–û—á–∏—Å—Ç–∏–ª state')
            else:
                await bot.send_message(message.from_user.id,
                                       '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —è—á–µ–π–∫–∞!–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞',
                                       reply_markup=exitqr)
        elif len(ans) == 4 and int(ans[0]) == 1 and 0 < int(ans[1]) < 8:
            if 0 < int(ans[2]) < 9 and int(ans[3]) < 5:

                await bot.send_message(message.from_user.id, '{}{} —Ä—è–¥ {} —Å–µ–∫—Ü–∏—è {} —è—á–µ–π–∫–∞'.
                                       format(ans[0], ans[1], ans[2], ans[3]))

                data = ('012_825-{}{}-0{}-{}'
                        .format(message.text[0], message.text[1], message.text[2], message.text[3]))

                qr_code(message, data)
                qrcod = open('qcodes/{}.jpg'.format(message.text), 'rb')
                await bot.send_photo(message.from_user.id, qrcod)

                await state.reset_state()
                logger.info('–û—á–∏—Å—Ç–∏–ª state')
            else:
                await bot.send_message(message.from_user.id,
                                       '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —è—á–µ–π–∫–∞!–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞',
                                       reply_markup=exitqr)
        else:
            await bot.send_message(message.from_user.id,
                                   '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —è—á–µ–π–∫–∞!–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞',
                                   reply_markup=exitqr)
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω—ã –±—É–∫–≤—ã –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã',
                               reply_markup=exitqr)


@dp.message_handler(state=Search.art)
async def input_art(message: types.Message, state: FSMContext):
    ans = message.text
    try:
        cells = search_articul(ans)
        if len(cells) != 0:
            logger.info('–í–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ - {}'.format(cells))
            for item in cells:
                await bot.send_message(message.from_user.id, item,
                                       reply_markup=InlineKeyboardMarkup().add(
                                           InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ',
                                                                callback_data='{}'.format(
                                                                    ans
                                                                ))))
                await Search.show_all.set()
        else:
            await bot.send_message(message.from_user.id, '–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await state.reset_state()
            logger.info('–Ω–µ –Ω–∞—à–µ–ª –∞—Ä—Ç–∏–∫—É–ª –Ω–∞ —Å–∫–ª–∞–¥–µ –û—á–∏—Å—Ç–∏–ª state')
    except Exception as ex:
        await bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ')
        logger.debug(ex)
        await state.reset_state()
        logger.info('–û—á–∏—Å—Ç–∏–ª state')


@dp.message_handler(content_types=['text'], state='*')
async def bot_message(message: types.Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ qcode —è—á–µ–µ–∫, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ.
    –û—Å–Ω–æ–≤–Ω–æ–µ, –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é requests_mediagroup, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å json –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ—É,
    –∏–Ω–∞—á–µ –∏–¥–µ–º —Ü–∏–∫–ª–æ–º –ø–æ –∫–æ—Ä—Ç–µ–∂—É –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ
    """
    if message.text == 'üÜö V-Sales_825':
        await bot.send_message(message.from_user.id, 'V-Sales_825')

        qrc = open('qcodes/V-Sales_825.jpg', 'rb')
        await bot.send_photo(message.chat.id, qrc)

    elif message.text == '‚ò£ R12_BrakIn_825':
        await bot.send_message(message.from_user.id, 'R12_BrakIn_825')

        qrc = open('qcodes/R12_BrakIn_825.jpg', 'rb')
        await bot.send_photo(message.chat.id, qrc)

    elif message.text == 'ü§ñ Qrcode —è—á–µ–π–∫–∏':
        await show_qr(message, state)

    elif message.text == 'üì¶ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏':
        await show_place(message, state)

    elif message.text == '‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await bot_help(message)

    elif message.text == 'üîç –ü–æ–∏—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ':
        await search(message, state)

    else:
        start_time = time.time()
        answer = message.text.lower()
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {}: –∑–∞–ø—Ä–æ—Å–∏–ª –∞—Ä—Ç–∏–∫—É–ª {}'.format(
            message.from_user.id,
            message.from_user.first_name,
            answer
        ))

        if len(answer) == 8 and answer.isdigit() and answer[:2] == '80':
            await show_media(message, state)
        else:
            await bot.send_message(message.from_user.id,
                                   '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ. –ü—Ä–∏–º–µ—Ä: 80422781')
        logger.info("--- –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ - {}s seconds ---".format(time.time() - start_time))


@dp.callback_query_handler(state=[Showphoto.show_qr, Place.mesto_4, Search.show_all])
async def answer_exit(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'exit':
        await call.answer(cache_time=5)
        answer: str = call.data
        logger.info('–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç: {}. –°–æ—Ö—Ä–∞–Ω—è—é –≤ state'.format(answer))
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80264335')
        await state.reset_state()
        logger.info('–û—á–∏—Å—Ç–∏–ª state')
    elif call.data == 'hide':
        async with state.proxy() as data:
            for key in data:
                if str(key).startswith('photo'):
                    asyncio.create_task(delete_message(data['{}'.format(key)]))
    else:
        start_time = time.time()
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ –∞—Ä—Ç.{}'.format(call.message.from_user.id, call.data))
        if os.path.exists('base/{}.json'.format(call.data)):
            logger.info('–Ω–∞—à–µ–ª json –∏ –≤—ã–≤–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
            with open('base/{}.json'.format(call.data), "r", encoding='utf-8') as read_file:
                data = json.load(read_file)
                photo = await call.message.answer_photo(data["url_imgs"][0],
                                                        reply_markup=hide)
        else:
            with open('stikers/seach.tgs', 'rb') as sticker:
                sticker = await call.message.answer_sticker(sticker)
            try:
                url = get_info(call.data)
                photo = await call.message.answer_photo(url[0][0],
                                                        reply_markup=hide)
            except Exception as ex:
                logger.debug(ex)
            finally:
                asyncio.create_task(delete_message(sticker))

        async with state.proxy() as data:
            try:
                data['photo{}'.format(call.data)] = photo
            except Exception as ex:
                logger.debug(ex)
        logger.info('–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑:{} —Å–µ–∫.'.format(time.time() - start_time))


@dp.callback_query_handler(state=Place.mesto_1)
async def place_1(call: types.CallbackQuery, state: FSMContext):
    if call.data == '012_825-OX':
        async with state.proxy() as data:
            data['mesto1'] = call.data
            asyncio.create_task(delete_message(data['message1']))
            await call.message.answer('\n'.join(place('012_825-OX')))
            await state.reset_state()
            logger.info('–û—á–∏—Å—Ç–∏–ª state')
    else:
        await call.answer(cache_time=5)
        answer: str = call.data
        logger.info('–ü–æ–ª—É—á–∏–ª —Ä—è–¥: {}'.format(answer))

        async with state.proxy() as data:
            asyncio.create_task(delete_message(data['message1']))
            mes1 = await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ü–∏—é:', reply_markup=mesto2)
            data['mesto1'] = answer
            data['message1'] = mes1
        await Place.mesto_2.set()


@dp.callback_query_handler(state=Place.mesto_2)
async def place_2(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    answer: str = call.data
    logger.info('–ü–æ–ª—É—á–∏–ª —Å–µ–∫—Ü–∏—é: {}'.format(answer))

    async with state.proxy() as data:
        asyncio.create_task(delete_message(data['message1']))
        mes1 = await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è—á–µ–π–∫—É:', reply_markup=mesto3)
        data['mesto2'] = answer
        data['message1'] = mes1

    await Place.mesto_3.set()


@dp.callback_query_handler(state=Place.mesto_3)
async def place_3(call: types.CallbackQuery, state: FSMContext):
    await call.answer(cache_time=5)
    answer: str = call.data
    logger.info('–ü–æ–ª—É—á–∏–ª —è—á–µ–π–∫—É: {}. '.format(answer))

    async with state.proxy() as data:
        data['mesto3'] = answer
        asyncio.create_task(delete_message(data['message1']))
        if len(data['mesto1']) == 1:
            data['mesto1'] = '0{}'.format(data['mesto1'])

        result = '012_825-{}-0{}-{}'.format(
            data['mesto1'],
            data['mesto2'],
            data['mesto3']
        )
        await call.message.answer('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ {}:'.format(result))
        data['result'] = result
        logger.info(data['result'])

        if place(result):
            for item in place(result):
                await call.message.answer(item,
                                          reply_markup=InlineKeyboardMarkup().add(
                                              InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ',
                                                                   callback_data='{}'.format(
                                                                       item[:8]
                                                                   ))))

            await Place.mesto_4.set()
        else:
            await call.message.answer('–Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è')
