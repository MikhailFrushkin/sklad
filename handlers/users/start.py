import asyncio
import json
import os.path
from contextlib import suppress

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.utils.exceptions import (MessageCantBeDeleted,
                                      MessageToDeleteNotFound)
from loguru import logger

import bot
from keyboards.default import menu
from keyboards.inline.quit import exitqr
from loader import dp, bot
from requests_mediagroup import get_info
from state.show_photo import Showphoto
from utils.new_qr import qr_code


async def delete_message(message: types.Message, sleep_time: int = 0):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å—Ç–∏–∫–µ—Ä–∞ –æ–∂–∏–¥–∞–Ω–∏—è"""
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    """
    sticker = open('stikers/AnimatedSticker.tgs', 'rb')
    await bot.send_sticker(message.chat.id, sticker)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {}!'
                         '\n–Ø –±–æ—Ç - –¥–ª—è –ø–æ–∫–∞–∑–∞ Qrcode —è—á–µ–µ–∫ —Å–∫–ª–∞–¥–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–∞'
                         '\n–î–ª—è –ø–æ–∫–∞–∑–∞ Qrcode –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ü–æ–∫–∞–∑–∞—Ç—å qrcode —è—á–µ–π–∫–∏"'.format(message.from_user.first_name))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80264335', reply_markup=menu)


@dp.message_handler(commands=['showqr'], state='*')
async def show_qr(message: types.Message, state: FSMContext):
    """
    –¢—Ä–∏–≥–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É showqr –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å –∫–Ω–æ–ø–∫–∏.
    """
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}: {} {} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É /showqr'.format(
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.username
    ))

    await bot.send_message(message.from_user.id, '–î–ª—è –ø–æ–∫–∞–∑–∞ Qrcode –≤–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞')
    async with state.proxy() as data:
        data['command'] = message.get_command()
        data['message_id'] = message.message_id

    await Showphoto.show_qr.set()


@dp.message_handler(state=Showphoto.show_qr)
async def showqr(message: types.Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ qcodes.
    –ï–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç.
    –°–∫–∏–¥—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–µ.
    """
    ans = message.text
    if ans.isdigit():
        if len(ans) == 3:
            if 0 < int(ans[1]) < 9 and int(ans[2]) < 5:

                await bot.send_message(message.from_user.id, '{} —Ä—è–¥ {} —Å–µ–∫—Ü–∏—è {} —è—á–µ–π–∫–∞'.
                                       format(ans[0], ans[1], ans[2]))

                data = ('012_825-0{}-0{}-{}'.format(message.text[0], message.text[1], message.text[2]))
                qr_code(message, data)
                qrcod = open('qcodes/{}.jpg'.format(message.text), 'rb')
                await bot.send_photo(message.from_user.id, qrcod)

                await state.reset_state()
                logger.info('–û—á–∏—Å—Ç–∏–ª state')
            else:
                await bot.send_message(message.from_user.id,
                                       '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —è—á–µ–π–∫–∞!–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞',
                                       reply_markup=exitqr)
        elif len(ans) == 4 and int(ans[0]) == 1 and 0 < int(ans[1]) < 8:
            if 0 < int(ans[2]) < 9 and int(ans[3]) < 5:

                await bot.send_message(message.from_user.id, '{}{} —Ä—è–¥ {} —Å–µ–∫—Ü–∏—è {} —è—á–µ–π–∫–∞'.
                                       format(ans[0], ans[1], ans[2], ans[3]))

                data = ('012_825-{}{}-0{}-{}'
                        .format(message.text[0], message.text[1], message.text[2], message.text[3]))

                qr_code(message, data)
                qrcod = open('qcodes/{}.jpg'.format(message.text), 'rb')
                await bot.send_photo(message.from_user.id, qrcod)

                await state.reset_state()
                logger.info('–û—á–∏—Å—Ç–∏–ª state')
            else:
                await bot.send_message(message.from_user.id,
                                       '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —è—á–µ–π–∫–∞!–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞',
                                       reply_markup=exitqr)
        else:
            await bot.send_message(message.from_user.id,
                                   '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —è—á–µ–π–∫–∞!–í–≤–µ–¥–∏—Ç–µ —Ä—è–¥, —Å–µ–∫—Ü–∏—é, —è—á–µ–π–∫—É –±–µ–∑ –Ω—É–ª–µ–π –∏ –ø—Ä–æ–±–µ–ª–∞',
                                   reply_markup=exitqr)
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω—ã –±—É–∫–≤—ã –∏–ª–∏ —Å–∏–º–≤–æ–ª—ã',
                               reply_markup=exitqr)


@dp.callback_query_handler(state=Showphoto.show_qr)
async def answer_exit(call: types.CallbackQuery, state: FSMContext):
    """
    –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞, –ø–æ—Å–ª–µ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏
    """
    await call.answer(cache_time=60)
    answer: str = call.data
    logger.info('–ü–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç: {}. –°–æ—Ö—Ä–∞–Ω—è—é –≤ state'.format(answer))
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80264335')
    await state.reset_state()
    logger.info('–û—á–∏—Å—Ç–∏–ª state')


@dp.message_handler(content_types=['text'], state='*')
async def bot_message(message: types.Message, state: FSMContext):
    """
    –í—ã–≤–æ–¥–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ qcode —è—á–µ–µ–∫, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ.
    –û—Å–Ω–æ–≤–Ω–æ–µ, –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é requests_mediagroup, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å json –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ—É,
    –∏–Ω–∞—á–µ –∏–¥–µ–º —Ü–∏–∫–ª–æ–º –ø–æ –∫–æ—Ä—Ç–µ–∂—É –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ
    """
    if message.text == 'üÜö V-Sales_825':
        await bot.send_message(message.from_user.id, 'V-Sales_825')

        qrc = open('qcodes/V-Sales_825.jpg', 'rb')
        await bot.send_photo(message.chat.id, qrc)

    elif message.text == '‚ò£ R12_BrakIn_825':
        await bot.send_message(message.from_user.id, 'R12_BrakIn_825')

        qrc = open('qcodes/R12_BrakIn_825.jpg', 'rb')
        await bot.send_photo(message.chat.id, qrc)

    elif message.text == 'ü§ñ –ü–æ–∫–∞–∑–∞—Ç—å Qrcode —è—á–µ–π–∫–∏':
        await show_qr(message, state)
    elif message.text == '‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await bot.send_message(message.from_user.id,
                               '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ú–∏—Ö–∞–∏–ª—É, –ë–Æ 825(—Å–∫–ª–∞–¥), –ø–æ—á—Ç–∞ - muxazila@mail.ru')
    else:
        answer = message.text.lower()
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {}: –∑–∞–ø—Ä–æ—Å–∏–ª –∞—Ä—Ç–∏–∫—É–ª {}'.format(
            message.from_user.id,
            message.from_user.first_name,
            answer
        ))
        if len(answer) == 8 and answer.isdigit() and answer[:2] == '80':

            if os.path.exists('base/{}.json'.format(answer)):
                logger.info('–Ω–∞—à–µ–ª json –∏ –≤—ã–≤–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
                with open('base/{}.json'.format(answer), "r", encoding='utf-8') as read_file:
                    data = json.load(read_file)
                    await bot.send_message(message.from_user.id, data['name'].replace('#', '–ê—Ä—Ç–∏–∫—É–ª: '))
                    if len(data['url_imgs']) >= 2:
                        media = types.MediaGroup()
                        if len(data['url_imgs']) < 10:
                            for i_photo in data['url_imgs']:
                                media.attach_photo(i_photo)
                            await message.answer_media_group(media)
                        else:
                            for i_photo in range(10):
                                media.attach_photo(data['url_imgs'][i_photo])
                            await message.answer_media_group(media)
                    else:
                        await message.answer_photo(data['url_imgs'])
                    await bot.send_message(message.from_user.id, '\n'.join(data['params']))
                    await bot.send_message(message.from_user.id,
                                           '–¶–µ–Ω–∞ —Å —Å–∞–π—Ç–∞: {}(–£—Ç–æ—á–Ω—è–π—Ç–µ –≤ –í–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ)'.format(data['price']))
                    await state.reset_state()
                    logger.info('–û—á–∏—Å—Ç–∏–ª state')

            else:
                try:
                    with open('stikers/seach.tgs', 'rb') as sticker:
                        sticker = await bot.send_sticker(message.chat.id, sticker)

                    url_list = get_info(answer)
                    await bot.send_message(message.from_user.id, url_list[1].replace('#', '–ê—Ä—Ç–∏–∫—É–ª: '))
                    logger.info('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å–ø–∏—Å–æ–∫ —É—Ä–ª - {}\n'.format(url_list))
                    if len(url_list[0]) >= 2:
                        media = types.MediaGroup()
                        if len(url_list[0]) < 10:
                            for i_photo in url_list[0]:
                                media.attach_photo(i_photo)
                            await message.answer_media_group(media)
                        else:
                            for i_photo in range(10):
                                media.attach_photo(url_list[0][i_photo])
                            await message.answer_media_group(media)
                    else:
                        await message.answer_photo(url_list[0][0])
                    await bot.send_message(message.from_user.id, '\n'.join(url_list[2]))
                    await bot.send_message(message.from_user.id,
                                           '–¶–µ–Ω–∞ —Å —Å–∞–π—Ç–∞: {}(–£—Ç–æ—á–Ω—è–π—Ç–µ –≤ –í–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ)'.format(url_list[3]))
                    asyncio.create_task(delete_message(sticker))

                except Exception as ex:
                    await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80422781')
                    asyncio.create_task(delete_message(sticker))

                    logger.debug('{}'.format(ex))
        else:
            await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª. –ü—Ä–∏–º–µ—Ä: 80422781')
