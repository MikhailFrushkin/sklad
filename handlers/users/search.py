import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger

import bot
from handlers.users.back import back
from handlers.users.delete_message import delete_message
from keyboards.default.menu import second_menu
from keyboards.inline.mesto import search_sklad_b
from keyboards.inline.quit import exitqr
from loader import dp, bot
from state.states import Search
from utils.open_exsel import search_articul, search_all_sklad, search_art_name, search_name
from utils.read_bd import set_order


async def search(message, state):
    """–í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞"""
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}: {} {} –∑–∞–ø—É—Å—Ç–∏–ª –ø–æ–∏—Å–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ'.format(
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.username
    ))
    mes1 = await bot.send_message(message.from_user.id, 'üîç',
                                  reply_markup=second_menu)
    mes2 = await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:',
                                  reply_markup=search_sklad_b)
    async with state.proxy() as data:
        data['message1'] = mes1
        data['message2'] = mes2

    await Search.sklad.set()


@dp.message_handler(content_types=['text'], state=Search.order)
async def order_num(message: types.Message, state: FSMContext):
    num = message.text
    async with state.proxy() as data:
        if num == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            await back(message, state)
        else:
            if not num.isdigit():
                await bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup=second_menu)
            else:
                data['order_num'] = num

        logger.info(data['order'])
        logger.info(data['order_num'])
        set_order(message.from_user.id, data['order'], data['order_num'])
    await Search.art.set()
    await bot.send_message(message.from_user.id,
                           '‚ö†–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ {} —Å–∫–ª–∞–¥–µ‚ö†'.format(data['sklad']),
                           reply_markup=exitqr)


@dp.callback_query_handler(state=[Search.sklad, Search.art])
async def input_art(call: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∏—Å–∫ –ø–æ —Å–∫–ª–∞–¥–∞–º –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
    """
    async with state.proxy() as data:
        if call.data == 'exit':
            await back(call, state)
        elif call.data.startswith('or'):
            await bot.send_message(call.from_user.id, '–í–≤e–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', reply_markup=second_menu)
            data['order'] = call.data[2:]
            await Search.order.set()
        elif call.data == 'name':
            await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:', reply_markup=second_menu)
            await Search.search_name.set()
        else:
            await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª', reply_markup=second_menu)
            await Search.art.set()
            data['sklad'] = call.data
        asyncio.create_task(delete_message(data['message1']))
        asyncio.create_task(delete_message(data['message2']))


@dp.message_handler(content_types=['text'], state=Search.search_name)
async def bot_message2(message: types.Message, state: FSMContext):
    name = message.text.lower()
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} {} –∑–∞–ø—É—Å—Ç–∏–ª –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {}'.format(message.from_user.id,
                                                                           message.from_user.first_name,
                                                                           name))
    answer = search_name(name)
    logger.info('–ü–æ–ª—É—á–µ–Ω–∏ –æ—Ç–≤–µ—Ç: {}'.format(answer))
    block_message = []
    if len(answer) > 0:
        count = 0
        for i in answer:
            count += 1
            block_message.append(i)
            if count == 25:
                await bot.send_message(message.from_user.id, '{}'.format('\n'.join(block_message)))
                block_message = []
                count = 0
        await bot.send_message(message.from_user.id, '{}'.format('\n'.join(block_message)))
    else:
        await bot.send_message(message.from_user.id, '–ù–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ, –ø–æ –∑–∞–ø—Ä–æ—Å—É: {}'.format(name))
    await back(message, state)


@dp.message_handler(content_types=['text'], state=Search.art)
async def search_sklad(message: types.Message, state: FSMContext):
    """
    –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
    """
    async with state.proxy() as data:
        if data['sklad'] == 'all':
            if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                await back(message, state)
            else:
                await bot.send_message(message.from_user.id, '{}'.format(search_art_name(message.text)))
                sklad_list = ['011_825', '012_825', 'A11_825', 'V_Sales', 'RDiff']
                for i in sklad_list:
                    cells = search_all_sklad(message.text, i)
                    if cells:
                        logger.info('–í–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ - {}: {}'.format(message.text, cells))
                        for item in cells:
                        #     if i == '012_825':
                        #         await bot.send_message(message.from_user.id, item,
                        #                                reply_markup=InlineKeyboardMarkup(row_width=1).
                        #                                add(InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å',
                        #                                                         callback_data='or{}'.format(
                        #                                                             message.text))))
                        #     else:
                            await bot.send_message(message.from_user.id, item)

                await bot.send_message(message.from_user.id, '‚ö†–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö‚ö†',
                                       reply_markup=exitqr)
                await Search.art.set()
        else:
            if message.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                await back(message, state)
            else:
                cells = search_articul(message.text, data['sklad'])
                if cells:
                    if len(cells) != 0:
                        logger.info('–í–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ - {}'.format(cells))
                        for item in cells:
                            # if data['sklad'] == '012_825':
                            #     await bot.send_message(message.from_user.id, item,
                            #                            reply_markup=InlineKeyboardMarkup(row_width=1).
                            #                            add(InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å',
                            #                                                     callback_data='or{}'.
                            #                                                     format(message.text))))
                            # else:
                            await bot.send_message(message.from_user.id, item)

                await bot.send_message(message.from_user.id,
                                       '‚ö†–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ {} —Å–∫–ª–∞–¥–µ‚ö†'.format(data['sklad']),
                                       reply_markup=exitqr)
                await Search.art.set()
