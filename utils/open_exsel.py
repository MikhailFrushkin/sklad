import csv

import pandas as pd
from loguru import logger

from data.config import path
from loader import bot


def dowload(sklad: str):
    if sklad == '–ú–∏–Ω.–≤–∏—Ç—Ä–∏–Ω–∞':
        try:
            excel_data_df = pd.read_excel('{}/utils/file_–ú–∏–Ω.–≤–∏—Ç—Ä–∏–Ω–∞.xls'.format(path),
                                          sheet_name='–°—Ç–æ–∫ –º–µ–Ω—å—à–µ –º–∏–Ω –≤–∏—Ç—Ä–∏–Ω—ã',
                                          usecols=['TG',
                                                   'SKU',
                                                   'Name',
                                                   'masterbox qty',
                                                   'box sku qty',
                                                   'showcase min',
                                                   'stock',
                                                   'stock V sale',
                                                   'stock Store',
                                                   'stock Show Room'])
            excel_data_df.to_csv('{}/utils/ctocks.csv'.format(path))
            return True
        except Exception as ex:
            logger.debug(ex)

    else:
        try:
            excel_data_df = pd.read_excel('{}/utils/file_{}.xls'.format(path, sklad), sheet_name='–õ–∏—Å—Ç1',
                                          usecols=['–°–∫–ª–∞–¥',
                                                   '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                                                   '–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã',
                                                   '–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
                                                   '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
                                                   '–î–æ—Å—Ç—É–ø–Ω–æ',
                                                   '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ',
                                                   '–¢–ì'])
            excel_data_df.to_csv('{}/utils/file_{}.csv'.format(path, sklad))
            return True
        except Exception as ex:
            logger.debug(ex)


def place(message: str, sklad: str) -> list[str]:
    try:
        with open('{}/utils/file_{}.csv'.format(path, sklad), newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            answer = []
            for row in reader:
                if row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'] == message:
                    line = '{} - {}' \
                           '\n---------------------------------' \
                           '\n–î–æ—Å—Ç—É–ø–Ω–æ: {} –†–µ–∑–µ—Ä–≤: {}' \
                           '\n---------------------------------' \
                        .format(row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'], row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'],
                                0 if row['–î–æ—Å—Ç—É–ø–Ω–æ'] == '' else row['–î–æ—Å—Ç—É–ø–Ω–æ'],
                                0 if row['–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ'] == '' else row[
                                    '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ']) \
                        .replace('.0', '')
                    answer.append(line)

        return answer if len(answer) != 0 else '–Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞'
    except Exception as ex:
        logger.debug(ex)


def place_dost(message: str, sklad: str) -> list[str]:
    try:
        with open('{}/utils/file_{}.csv'.format(path, sklad), newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            answer = []
            for row in reader:
                if row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].startswith(message) and row['–î–æ—Å—Ç—É–ø–Ω–æ'] != '':
                    line = 'üîÑ–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å —Å —è—á–µ–π–∫–∏ {}' \
                           '\n{} - {}' \
                           '\n–î–æ—Å—Ç—É–ø–Ω–æ: {}\n' \
                        .format(row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'], row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'], row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'],
                                row['–î–æ—Å—Ç—É–ø–Ω–æ']) \
                        .replace('.0', '')
                    answer.append(line)
        if len(answer) == 0:
            return ['‚ùå–í —è—á–µ–π–∫–∞—Ö –Ω–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞']
        return answer
    except Exception as ex:
        logger.debug(ex)


def search_articul(art: str, sklad: str) -> list[str]:
    with open('{}/utils/file_{}.csv'.format(path, sklad), newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        answer = []
        for row in reader:
            if row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'] == art:
                line = '‚úÖ{} - {}\n' \
                       '---------------------------------' \
                       '\n–î–æ—Å—Ç—É–ø–Ω–æ: {} –†–µ–∑–µ—Ä–≤: {}'.format(row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'], row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'],
                                                          0 if row['–î–æ—Å—Ç—É–ø–Ω–æ'] == '' else row['–î–æ—Å—Ç—É–ø–Ω–æ'],
                                                          0 if row['–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ'] == '' else row[
                                                              '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ']) \
                    .replace('.0', '')
                answer.append(line)
    return answer


def search_name(name: str) -> list[str]:
    with open('{}/utils/file_012_825.csv'.format(path), newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        answer = []
        for row in reader:
            if not row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].startswith('012_825-Dost') \
                    and not row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].startswith('012_825-01') \
                    and not row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'].startswith('012_825-OX'):
                if name in row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].lower():
                    line = '‚úÖ{} - {} –î–æ—Å—Ç—É–ø–Ω–æ: {}\n' \
                           '{}'.format(row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'], row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'],
                                       0 if row['–î–æ—Å—Ç—É–ø–Ω–æ'] == '' else row['–î–æ—Å—Ç—É–ø–Ω–æ'], row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']) \
                        .replace('.0', '')
                    answer.append(line)
    return answer


def search_articul_order(art: str, sklad: str) -> list:
    try:
        with open('{}/utils/file_{}.csv'.format(path, sklad), newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            art_list = []
            art_dict = {
                '–ö–æ–¥': '',
                '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ': '',
                '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '',
                '–î–æ—Å—Ç—É–ø–Ω–æ': ''
            }
            for row in reader:
                if row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'] == art:
                    art_dict['–ö–æ–¥'] = art
                    art_dict['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'] = row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ']
                    art_dict['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] = row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']
                    art_dict['–î–æ—Å—Ç—É–ø–Ω–æ'] = row['–î–æ—Å—Ç—É–ø–Ω–æ'].replace('.0', '')
                    art_list.append(art_dict)
                    art_dict = {
                        '–ö–æ–¥': '',
                        '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ': '',
                        '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞': '',
                        '–î–æ—Å—Ç—É–ø–Ω–æ': ''
                    }
        if len(art_list) > 0:
            return art_list
        else:
            raise Exception
    except Exception as ex:
        logger.debug('‚ùå–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∫–ª–∞–¥–µ {}'.format(ex))


def search_all_sklad(art: str, sklad: str) -> list[str]:
    with open('{}/utils/file_{}.csv'.format(path, sklad), newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        answer = []
        for row in reader:
            if row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'] == art:
                line = '‚úÖ{} - –î–æ—Å—Ç—É–ø–Ω–æ: {} –†–µ–∑–µ—Ä–≤: {}'.format(
                    row['–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'],
                    0 if row['–î–æ—Å—Ç—É–ø–Ω–æ'] == '' else row['–î–æ—Å—Ç—É–ø–Ω–æ'],
                    0 if row['–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ'] == '' else row[
                        '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏\n—Ä–æ–≤–∞–Ω–æ']) \
                    .replace('.0', '')
                answer.append(line)
    return answer


def search_art_name(art: str) -> str:
    line = '–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏'
    sklad_list = ['011_825', '012_825', 'A11_825', 'V_Sales', 'RDiff']
    for i in sklad_list:
        with open('{}/utils/file_{}.csv'.format(path, i), newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                if row['–ö–æ–¥ \n–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã'] == art:
                    line = '{}'.format(row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'])
    return line


if __name__ == '__main__':
    print(search_art_name('80419935'))
